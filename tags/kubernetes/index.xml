<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on CINAQ</title>
    <link>/tags/kubernetes/</link>
    <description>Recent content in kubernetes on CINAQ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 Oct 2022 13:37:00 +0100</lastBuildDate><atom:link href="/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mendix SVG Hunt</title>
      <link>/blog/2022/10/20/mendix-svg-hunt/</link>
      <pubDate>Thu, 20 Oct 2022 13:37:00 +0100</pubDate>
      
      <guid>/blog/2022/10/20/mendix-svg-hunt/</guid>
      <description>Today a client reached out to me with a mysterious case where the build pipeline of his Mendix app started to fail. He has just upgraded his app to Mendix 7.23.33 but was surprised it was not very smooth. As always I&amp;rsquo;m intrigued by out-of-ordinary problems. And this one turned out quite interesting.
The error As with most issues, it starts with a huge stacktrace. You can find this stacktrace in the appendix A.</description>
    </item>
    
    <item>
      <title>Highly available Kubernetes with batteries for small business</title>
      <link>/blog/2020/05/25/highly-available-kubernetes-with-batteries-for-small-business/</link>
      <pubDate>Mon, 25 May 2020 13:37:00 +0100</pubDate>
      
      <guid>/blog/2020/05/25/highly-available-kubernetes-with-batteries-for-small-business/</guid>
      <description>Kindie (Kubernetes Individual) is an opinionated Kubernetes cluster setup for individuals or small business. Batteries included so that you can hit the ground running and add production workload in no time.
Target audience Sysadmin, DevOps, Cloud engineer with Linux and Kubernetes experience looking to build a Kubernetes cluster for production usage with bells and whistles focussed on web workloads. You should be able to have the cluster ready in a few hours.</description>
    </item>
    
    <item>
      <title>Speed up docker builds with distcc, ccache and kubernetes</title>
      <link>/blog/2020/05/10/speed-up-docker-builds-with-distcc-ccache-and-kubernetes/</link>
      <pubDate>Sun, 10 May 2020 13:37:00 +0000</pubDate>
      
      <guid>/blog/2020/05/10/speed-up-docker-builds-with-distcc-ccache-and-kubernetes/</guid>
      <description>For a recent project I had to write my own Orthanc plugin. To build this plugin I needed to build Orthanc from source. The official docker-images are assembled based on pre-built binaries. So I could not use them.
Orthanc Dockerfile The first step is create a Dockerfile that compiles Orthanc from source. Looking through the compilation instructions and inspired by the official docker images I have assembled the following Dockerfile:</description>
    </item>
    
  </channel>
</rss>
