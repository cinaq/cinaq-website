<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on CINAQ</title>
    <link>/tags/docker/</link>
    <description>Recent content in docker on CINAQ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Jun 2023 13:37:00 +0100</lastBuildDate><atom:link href="/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Deploy Mendix app to Kubernetes without corrupting your data</title>
      <link>/blog/2023/06/05/deploy-mendix-app-to-kubernetes-without-corrupting-your-data/</link>
      <pubDate>Mon, 05 Jun 2023 13:37:00 +0100</pubDate>
      
      <guid>/blog/2023/06/05/deploy-mendix-app-to-kubernetes-without-corrupting-your-data/</guid>
      <description>Deploying Mendix apps in Kubernetes can be more complex than anticipated, often leading to potential issues like data corruption. This article delves into the specific challenges of running Mendix apps in a cloud-native environment. It examines the risks posed by concurrent versions, the importance of the leader-workers model, and the impact of deployment strategies. Furthermore, it explores the introduction of Mendix for private cloud and the mitigation techniques that can be employed to ensure a smooth and secure deployment process.</description>
    </item>
    
    <item>
      <title>Mendix SVG Hunt</title>
      <link>/blog/2022/10/20/mendix-svg-hunt/</link>
      <pubDate>Thu, 20 Oct 2022 13:37:00 +0100</pubDate>
      
      <guid>/blog/2022/10/20/mendix-svg-hunt/</guid>
      <description>Today a client reached out to me with a mysterious case where the build pipeline of his Mendix app started to fail. He has just upgraded his app to Mendix 7.23.33 but was surprised it was not very smooth. As always I&amp;rsquo;m intrigued by out-of-ordinary problems. And this one turned out quite interesting.
The error As with most issues, it starts with a huge stacktrace. You can find this stacktrace in the appendix A.</description>
    </item>
    
    <item>
      <title>Speed up docker builds with distcc, ccache and kubernetes</title>
      <link>/blog/2020/05/10/speed-up-docker-builds-with-distcc-ccache-and-kubernetes/</link>
      <pubDate>Sun, 10 May 2020 13:37:00 +0000</pubDate>
      
      <guid>/blog/2020/05/10/speed-up-docker-builds-with-distcc-ccache-and-kubernetes/</guid>
      <description>For a recent project I had to write my own Orthanc plugin. To build this plugin I needed to build Orthanc from source. The official docker-images are assembled based on pre-built binaries. So I could not use them.
Orthanc Dockerfile The first step is create a Dockerfile that compiles Orthanc from source. Looking through the compilation instructions and inspired by the official docker images I have assembled the following Dockerfile:</description>
    </item>
    
  </channel>
</rss>
